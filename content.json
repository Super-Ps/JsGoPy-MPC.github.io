{"meta":{"title":"bugfix","subtitle":"逃不掉与bug的恩怨","description":"bugdix","author":"Super-Jonny","url":"https://bugfixs.com","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2020-05-22T15:35:19.930Z","updated":"2020-05-22T15:35:19.930Z","comments":false,"path":"/404.html","permalink":"https://bugfixs.com/404.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-05-22T15:35:19.937Z","updated":"2020-05-22T15:35:19.937Z","comments":true,"path":"links/index.html","permalink":"https://bugfixs.com/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2020-05-22T15:35:19.937Z","updated":"2020-05-22T15:35:19.937Z","comments":false,"path":"repository/index.html","permalink":"https://bugfixs.com/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-05-22T15:35:19.937Z","updated":"2020-05-22T15:35:19.937Z","comments":false,"path":"tags/index.html","permalink":"https://bugfixs.com/tags/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-05-22T15:35:19.935Z","updated":"2020-05-22T15:35:19.935Z","comments":false,"path":"about/index.html","permalink":"https://bugfixs.com/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2020-05-22T15:35:19.935Z","updated":"2020-05-22T15:35:19.935Z","comments":false,"path":"books/index.html","permalink":"https://bugfixs.com/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-05-22T15:35:19.936Z","updated":"2020-05-22T15:35:19.936Z","comments":false,"path":"categories/index.html","permalink":"https://bugfixs.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"websocket-go","slug":"websocket","date":"2020-05-22T14:41:51.000Z","updated":"2020-05-22T15:58:54.573Z","comments":true,"path":"2020/05/22/websocket/","link":"","permalink":"https://bugfixs.com/2020/05/22/websocket/","excerpt":"","text":"多人本地提交push 测试 查看图片","categories":[{"name":"协议","slug":"协议","permalink":"https://bugfixs.com/categories/%E5%8D%8F%E8%AE%AE/"}],"tags":[{"name":"websocket","slug":"websocket","permalink":"https://bugfixs.com/tags/websocket/"}]},{"title":"Cypress安装与启动","slug":"Cypress","date":"2020-05-21T13:05:48.000Z","updated":"2020-05-23T06:40:23.832Z","comments":true,"path":"2020/05/21/Cypress/","link":"","permalink":"https://bugfixs.com/2020/05/21/Cypress/","excerpt":"","text":"安装 创建一个项目目录 1cd /your/project/path 进入到上面路劲，执行 npm init -y ,再执行 12345678npm install cypress --save-dev&#96;&#96;&#96; #### 启动- Node的正常启动-完整路劲启动&#96;&#96;&#96; bash.&#x2F;node_modules&#x2F;.bin&#x2F;cypress open 用过npx的都知道他的强大 1npx cypress open integration/自定义case目录/case.js 1234567891011121314151617181920212223242526272829303132333435363738394041describe ('登录',function()&#123; // this.be(()=&gt;&#123; // cy.visit('http://test-web.makeblock.com/edu/index.html') // &#125;) before(()=&gt;&#123; cy.visit('http://XXXXX') cy.log('这个测试集用例只执行一次，测试准备工作') &#125;) it('点击',function()&#123; cy.get('.ant-btn') .click() cy.wait(5000) &#125;) it('跳转到登录页面',function()&#123; cy.url() .should('include','https://xxxxxlogin') &#125;) it('输入邮箱',function()&#123; cy.get('#account') .type('steamedu.list@makeblock.com') &#125;) it('输入密码',function()&#123; cy.get('#password') .type('123456') &#125;) it('输入密码',function()&#123; cy.contains(' 登 录 ') .click() &#125;) //Can't run because you've entered an invalid browser name. &#125;) 请求登录代替元素定位 待实现","categories":[{"name":"分层自动化测试","slug":"分层自动化测试","permalink":"https://bugfixs.com/categories/%E5%88%86%E5%B1%82%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"Cypress","slug":"Cypress","permalink":"https://bugfixs.com/tags/Cypress/"}]},{"title":"Docker-locsut","slug":"容器-1","date":"2020-05-21T12:31:32.000Z","updated":"2020-05-22T15:35:19.934Z","comments":true,"path":"2020/05/21/容器-1/","link":"","permalink":"https://bugfixs.com/2020/05/21/%E5%AE%B9%E5%99%A8-1/","excerpt":"","text":"为某项目添加Dockerfile Dockerfile： 12345FROM locustio&#x2F;locust ADD . &#x2F;src&#x2F;WORKDIR &#x2F;srcRUN pip install -r requirements.txt --user 执行 docker build -t xxx 启动master 12docker run --name l-master -d -p 8089:8089 -p 5557:5557 -p 5558:5558 locust-test02:latest locust -f &#x2F;src&#x2F;scenedesign&#x2F;2.locustfile_Baidu_AI.py --master 启动slave 1docker run --link l-master --name l-slave -d locust-test02:latest locust -f &#x2F;src&#x2F;scenedesign&#x2F;2.locustfile_Baidu_AI.py --slave --master-host&#x3D;l-master 查看locust web 8089 端口 验证连接状态 将镜像 推送至 docker 仓库，用于分布式","categories":[{"name":"Docker","slug":"Docker","permalink":"https://bugfixs.com/categories/Docker/"}],"tags":[{"name":"Dockerfile","slug":"Dockerfile","permalink":"https://bugfixs.com/tags/Dockerfile/"}]},{"title":"Docker-XXX","slug":"容器","date":"2020-05-21T12:20:45.000Z","updated":"2020-05-22T15:35:19.934Z","comments":true,"path":"2020/05/21/容器/","link":"","permalink":"https://bugfixs.com/2020/05/21/%E5%AE%B9%E5%99%A8/","excerpt":"","text":"","categories":[{"name":"Docker","slug":"Docker","permalink":"https://bugfixs.com/categories/Docker/"}],"tags":[{"name":"Image","slug":"Image","permalink":"https://bugfixs.com/tags/Image/"}]},{"title":"test","slug":"test-2","date":"2020-05-20T12:28:20.000Z","updated":"2020-05-22T15:35:19.933Z","comments":true,"path":"2020/05/20/test-2/","link":"","permalink":"https://bugfixs.com/2020/05/20/test-2/","excerpt":"","text":"","categories":[{"name":"测试开发","slug":"测试开发","permalink":"https://bugfixs.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"理论","slug":"理论","permalink":"https://bugfixs.com/tags/%E7%90%86%E8%AE%BA/"}]},{"title":"test","slug":"test-1","date":"2020-05-20T12:28:17.000Z","updated":"2020-05-22T15:35:19.933Z","comments":true,"path":"2020/05/20/test-1/","link":"","permalink":"https://bugfixs.com/2020/05/20/test-1/","excerpt":"","text":"","categories":[{"name":"测试开发","slug":"测试开发","permalink":"https://bugfixs.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"理论","slug":"理论","permalink":"https://bugfixs.com/tags/%E7%90%86%E8%AE%BA/"}]},{"title":"test","slug":"test","date":"2020-05-20T12:28:12.000Z","updated":"2020-05-22T15:35:19.934Z","comments":true,"path":"2020/05/20/test/","link":"","permalink":"https://bugfixs.com/2020/05/20/test/","excerpt":"","text":"","categories":[{"name":"测试开发","slug":"测试开发","permalink":"https://bugfixs.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"理论","slug":"理论","permalink":"https://bugfixs.com/tags/%E7%90%86%E8%AE%BA/"}]},{"title":"go-f3","slug":"go-f3","date":"2020-05-20T12:09:20.000Z","updated":"2020-05-22T15:35:19.932Z","comments":true,"path":"2020/05/20/go-f3/","link":"","permalink":"https://bugfixs.com/2020/05/20/go-f3/","excerpt":"","text":"","categories":[{"name":"Go","slug":"Go","permalink":"https://bugfixs.com/categories/Go/"}],"tags":[{"name":"并发","slug":"并发","permalink":"https://bugfixs.com/tags/%E5%B9%B6%E5%8F%91/"}]},{"title":"go-f2","slug":"go-f2","date":"2020-05-20T12:09:17.000Z","updated":"2020-05-22T15:35:19.932Z","comments":true,"path":"2020/05/20/go-f2/","link":"","permalink":"https://bugfixs.com/2020/05/20/go-f2/","excerpt":"","text":"","categories":[{"name":"Go","slug":"Go","permalink":"https://bugfixs.com/categories/Go/"}],"tags":[{"name":"接口","slug":"接口","permalink":"https://bugfixs.com/tags/%E6%8E%A5%E5%8F%A3/"}]},{"title":"Go-f1","slug":"go-f1","date":"2020-05-20T12:09:14.000Z","updated":"2020-05-22T15:35:19.932Z","comments":true,"path":"2020/05/20/go-f1/","link":"","permalink":"https://bugfixs.com/2020/05/20/go-f1/","excerpt":"","text":"","categories":[{"name":"Go","slug":"Go","permalink":"https://bugfixs.com/categories/Go/"}],"tags":[{"name":"组装嵌套","slug":"组装嵌套","permalink":"https://bugfixs.com/tags/%E7%BB%84%E8%A3%85%E5%B5%8C%E5%A5%97/"}]},{"title":"数据结构-双指针","slug":"shujujiegou","date":"2020-05-16T12:20:58.000Z","updated":"2020-05-22T15:35:19.933Z","comments":true,"path":"2020/05/16/shujujiegou/","link":"","permalink":"https://bugfixs.com/2020/05/16/shujujiegou/","excerpt":"","text":"来看下 《删除排序数组中的重复项》 这道题目, 然后我会分享解题思路和源码, 最后是我们的QA环节。 1. 题目 给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。 不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。 示例 1: 给定数组 nums = [1,1,2], 函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 你不需要考虑数组中超出新长度后面的元素。 示例 2: 给定 nums = [0,0,1,1,1,2,2,3,3,4], 函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。 你不需要考虑数组中超出新长度后面的元素。 2.解题: 同向双指针法 假设输入数组为 [1、2、2、6] 那么图像演示过程如下: 以上我们可以得到j及之前为非重复元素 整个过程纯语言表述如下: 数组完成排序后，我们可以放置两个指针 i 和 j，其中 i 是慢指针，而 j 是快指针。 其中 i及之前的元素为非重复项 j及之后为待重复检测的项 用j遍历数组, 如果 nums[i] = nums[j]，当前j不会搬移到非重复项区域 当我们遇到 nums[j] != nums[i]时，我们需要 递增 i (扩充非重复项数组区域) 并将nums[j]的值复制到 nums[i] 然后，接着我们将再次重复相同的过程，直到 j 到达数组的末尾为止。 源码如下: public int removeDuplicates(int[] nums) { if (nums.length == 0) return 0; int i = 0; for (int j = 1; j &lt; nums.length; j++) { if (nums[j] != nums[i]) { i++; nums[i] = nums[j]; } } return i + 1; } QA: 同向双指针还有哪些场景? 76.Minimum Window Substring","categories":[{"name":"数据结构算法","slug":"数据结构算法","permalink":"https://bugfixs.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"双指针","slug":"双指针","permalink":"https://bugfixs.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"}]},{"title":"hexo绑定域名","slug":"hexo-yuming-md","date":"2019-05-20T11:39:29.000Z","updated":"2020-05-22T15:35:19.932Z","comments":true,"path":"2019/05/20/hexo-yuming-md/","link":"","permalink":"https://bugfixs.com/2019/05/20/hexo-yuming-md/","excerpt":"","text":"绑定域名 阿里云登录后去注册域名，购买。 \b\b\b命令行终端 执行 ping 你的部署在github上的地址 ，用来获取ip ping 用户名.github.io 进入域名列表，点击解析，可以选择新手引导，也可以按照如下配置添加，记录纸就是你获取的IP地址 设置CNAME,在 本地博客/source 文件夹下面创建 CNAME 文件（没有后缀名的），在里面写上购买的域名 进入github, 找到你部署在github的站点仓库， xxx.github.io 点进去，进入Settings选项 往下拉 找到 GitHub Pages 设置 Custom domain 为你的域名 点击 Enforce HTTPS \b\b最后就可以按照域名访问你的博客了，第一次访问可能有点慢，注意查看名的状态为 正常。 将七牛云测试域名更换为自己的域名 在七牛云上添加一个域名，改域名首先是备案过的，其次命名要与添加 CNAME 记录的主机记录前缀一致，比如:cdn.xxx.com ,cdn就是主机记录的一种 无论你是腾讯云，还是阿里云都有相关的CNAME配置 添加办法指南 检验域名创建是否成功 点击查看步骤 最后在 _config.yml 内找到 七牛云的配置参数 修改为: urlPrefix: http://你添加的域名","categories":[{"name":"工具","slug":"工具","permalink":"https://bugfixs.com/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://bugfixs.com/tags/hexo/"}]},{"title":"压力客户端go版本框架","slug":"locust-go-slave","date":"2019-05-18T06:09:22.000Z","updated":"2020-05-22T15:35:19.932Z","comments":true,"path":"2019/05/18/locust-go-slave/","link":"","permalink":"https://bugfixs.com/2019/05/18/locust-go-slave/","excerpt":"","text":"介绍由go实现的客户端的由来 locust 虽然采用协程的方式节省资源并提高并发能力，但语言本身的缺陷使得在并发能力上仍然不是很出色，比如他采用的底层http请求库，或者是优化之后的请求库，都不是很理想，为什么这么说，是因为有go 的存在，所以表现出了差距。你会在locust官方看到一个提升并发能力的选项叫做boomer。 于是基于boomer 我又做了一些组装 改进，更加适用于分布式，更加出色的并发能力。 go实现的客户端目录 下图为go客户端结构 \b 查看路劲 /go/src/falcon/slave/cases 是我们需要编辑的目录，在这里完成业务编写 比如： xx业务.go yy业务.go, 名称唯一 具体示例 \b创建好 xx业务.go 文件后，假设现在需要写一个业务，是先登录，然后做别的一些列事情 ：即 登录 -&gt; 操作A -&gt; 操作B 所以先实现 登录 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253func (c *CaseEntry) Login() (*LoginRes,error) &#123; accounts:=&lt;-c.canshu c.Log.Info(\"&lt;-c.canshu\",accounts ) fmt.Println(\"&lt;-c.canshu\",accounts) body:=&amp;LoginPostBody&#123; //Account: \"jonny.peng@makeblock.com\", Account:accounts, Nonce: \"XXXX\", Password:\"XXXX\", Ticket:\"XXXXX\", &#125; sendBody, _ := json.Marshal(body) resConf := &amp;boomer_client.HttpRequestConfig&#123; Url: c.Config.Custom.Url, Route: c.Config.Custom.PostRoute, ContentType: c.Config.Custom.ContentType, Params: nil, Headers: nil, Body: sendBody, Request: nil, &#125; // 发送请求 resp, err := c.http.Post(resConf, true) var j JsonBody // 解析 _ =json.NewDecoder(strings.NewReader(string(resp.Body))).Decode(&amp;j) c.Log.Info(\"jsonBody-utoken\",j.Data.Utoken,\"sendBody\",string( sendBody) ) if err != nil &#123; c.Log.Error(fmt.Sprintf(\"Post %s fail:%s\", c.Config.Custom.PostRoute, err.Error())) c.RecordFailure(\"POST\", c.Config.Custom.PostRoute, 0, err.Error()) return nil, err &#125; //判断返回码 if resp.Code != 200 &#123; c.RecordFailure(\"POST\", c.Config.Custom.PostRoute, int64(resp.UsedMillTimes), fmt.Sprintf(\"Response code: %d\", resp.Code)) return nil, errors.New(fmt.Sprintf(\"Response code: %d\", resp.Code)) &#125; //c.RecordSuccess(\"POST\", c.Config.Custom.PostRoute, int64(resp.UsedMillTimes), resp.Length) //函数return前自动释放请求 defer c.http.FreeHttpResult(resp) c.RecordSuccess(\"POST\", c.Config.Custom.PostRoute, int64(resp.UsedMillTimes), resp.Length) return &amp;LoginRes&#123; Utoken: j.Data.Utoken, &#125;,nil &#125;&#125; 代码解释与 node ,python 的思想一样 都是初始化请求参数，发送请求，解析返回值，判断结果。有几处代码需要解释1下: 初始化参数是在 boomer_client.HttpRequestConfig 里头，这里面封装了一系列所有需要请求的参数， 解码返回值的方式跟go的特性相关，都是需要定义自己需要的结构，方式有N种，详细可以深入去学习 请求成功 c.RecordSuccess 请求失败 c.RecordFailure 分别统计成功的和失败的请求发送到 locsut 的master节点，因为集成了boomer 所以这样写。 接受者必须是 CaseEntry ,固定写法，因为这里定义了一些通用属性 实现登录后再实现操作A 123456789101112131415161718192021222324252627282930313233343536func (c *CaseEntry) 操作A (l *LoginRes)&#123; utoken :=l.Utoken header := map[string]string&#123; \"utoken\":utoken, &#125; body:=&amp;SignatureParm&#123; Signature: \"修改参数\", &#125; sendBody, _ := json.Marshal(body) resConf:=&amp;boomer_client.HttpRequestConfig&#123; Url: c.Config.Custom.Url, Route: c.Config.Custom.PatchRoure, ContentType: c.Config.Custom.ContentType, Headers: header, Body: sendBody, Request: nil, &#125; resp,err:=c.http.Patch(resConf,true) var s SignatureRes _ =json.NewDecoder(strings.NewReader(string(resp.Body))).Decode(&amp;s) if err != nil &#123; c.Log.Error(fmt.Sprintf(\"Patch %s fail:%s\", c.Config.Custom.PatchRoure, err.Error())) c.RecordFailure(\"Patch\", c.Config.Custom.PatchRoure, 0, err.Error()) &#125; //函数return前自动释放请求 defer c.http.FreeHttpResult(resp) c.RecordSuccess(\"Patch\", c.Config.Custom.PatchRoure, int64(resp.UsedMillTimes), resp.Length) c.Log.Info( fmt.Sprintf(\"patch-resBody:%d\",string(resp.Body))) return&#125; 代码解释: 也是一个标准请求流程，需要注意的是 接受者 也是 CaseEntry 固定写法。 接收的参数 是上一个操作的返回值，\b通过一个 LoginRes 结构体先存储，再传递到操作A 这个函数，达到参数传递的作用 至此就完成了 两个操作的 链接，一个完整的业务模拟。 组装业务: 上面实现了2个操作，但是需要包装在一起被调用，所以需要将多个业务 在当前页面 组装在一个函数内 例如这样: 1234567891011 // 登录后查询func (c *CaseEntry)组装业务()&#123; LoginRes,err:=c.登录() if err != nil &#123; return &#125; c.操作A(LoginRes) //c.Log.Info(\"登录成功后查询\",LoginRes)&#125; 配置文件: 完成好业务代码，接下来就需要配置好配置文件，找到路劲为：/go/src/falcon/slave/conf/main.yml 配置参数说明 ，这里的参数是与 /go/src/falcon/slave/config/config.go 定义的 K 对应的 1234567custom:url: 你测试的服务地址get_route: 地址后面的部分 你的请求部分 \" /XXX/XXX\"，post_route: 地址后面的部分 你的请求部分 \"/v1/login\"patch_route: \"/v1/user/signature\"content_type: \"application/json\" http_proxy: \"127.0.0.1:8080\" // 代理地址 如果有的话 配置好上面的的基础信息，再配置 case执行的部分 1234567case: - type: \"go\" // go版本 固定就写go fn: \"cases.组装业务\" // 这里表示 cases包下面的 组装业务 函数，对应上面的例子 name: \"组装业务\" //函数名称 enable: true // 启用 优先读取该配置，如果不执行设置false weight: 1 // 权重 上面说了配置是一个文件定义的，所以如果你的需要读取的配置参数较多就需要在这里新增，路劲 和 配置如下:/go/src/falcon/slave/config/config.go 12345678type Custom struct &#123; Url string `yaml:\"url\"` GetRoute string `yaml:\"get_route\"` PostRoute string `yaml:\"post_route\"` ContentType string `yaml:\"content_type\"` HttpProxy string `yaml:\"http_proxy\"` PatchRoure string `yaml:\"patch_route\"`&#125; 比如 PatchRoure 属性 就是新增的一个patch 请求 如果一个请求配置了多个地址，就需要改数据类型为数组， 相应的main.yml 也要改成 yml 数组的形式配置 运行: 此时需要启动你的服务器，这里服务有2个，一个是locust 的master，所以你切换到 /python/bin/, 运行 ./master_start.sh，根据你的操作系统来运行对应后缀的文件，win的对应 ./master_start.bat 然后启动 slave，也就是你编写的go 版本文件，切换到 /go/src/falcon/slave/bin 运行 ./start.sh -local 执行文件后缀同上，如果你要执行当前你的go -slave配置文件内的配置 就必须加上 -local 否则是读取的 locust master 上的配置 再到 locust master 上的 8888 站点 去输入user 就可以跑起来了。 调试: 方式1 : 如果你习惯于用内置的 log 方式调试，那只需要在代码内用log，例如上述代码内 c.Log.Info，启动方式还是采用 第8点运行，在 web站点用户信息内查看日志 方式2 : 如果你需要频繁打印信息， 采用fmt 的方式，就得如下做： 设置 go 执行环境 设置 go build 配置完毕，值需要点击开始运行，就能在控制台看到打印的信息。 推荐方式2 一次配置永久使用。不用频繁启停服务 测试服务器: 如果有同学先试试感觉， 可以直接访问本地部署的5555 服务，对应的文件是 cases.CustomDemo 最好是不要自己本地部署 5555 然后压测自己，机器扛不住的，最好是自己独立部署一台5555的服务，文件路劲在server/bin 直接启动，启动方式与上面描述的启动相同 总结 \b上述操作是一套基本使用流程，可能还存在一些细节未来得及想到 不断补充使用细节，及时更新","categories":[{"name":"性能测试","slug":"性能测试","permalink":"https://bugfixs.com/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"locust-go-slave","slug":"locust-go-slave","permalink":"https://bugfixs.com/tags/locust-go-slave/"}]},{"title":"node-f3.go","slug":"node-f3-go","date":"2018-05-20T12:17:30.000Z","updated":"2020-05-22T15:35:19.933Z","comments":true,"path":"2018/05/20/node-f3-go/","link":"","permalink":"https://bugfixs.com/2018/05/20/node-f3-go/","excerpt":"","text":"","categories":[{"name":"Node","slug":"Node","permalink":"https://bugfixs.com/categories/Node/"}],"tags":[{"name":"缓冲区","slug":"缓冲区","permalink":"https://bugfixs.com/tags/%E7%BC%93%E5%86%B2%E5%8C%BA/"}]},{"title":"node-f2.go","slug":"node-f2-go","date":"2018-05-20T12:17:02.000Z","updated":"2020-05-22T15:35:19.933Z","comments":true,"path":"2018/05/20/node-f2-go/","link":"","permalink":"https://bugfixs.com/2018/05/20/node-f2-go/","excerpt":"","text":"","categories":[{"name":"Node","slug":"Node","permalink":"https://bugfixs.com/categories/Node/"}],"tags":[{"name":"异步非阻塞","slug":"异步非阻塞","permalink":"https://bugfixs.com/tags/%E5%BC%82%E6%AD%A5%E9%9D%9E%E9%98%BB%E5%A1%9E/"}]},{"title":"node-f1.go","slug":"node-f1-go","date":"2018-05-20T12:16:46.000Z","updated":"2020-05-22T15:35:19.933Z","comments":true,"path":"2018/05/20/node-f1-go/","link":"","permalink":"https://bugfixs.com/2018/05/20/node-f1-go/","excerpt":"","text":"","categories":[{"name":"Node","slug":"Node","permalink":"https://bugfixs.com/categories/Node/"}],"tags":[{"name":"多进程","slug":"多进程","permalink":"https://bugfixs.com/tags/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"}]},{"title":"hexo一套操作","slug":"hexo-pure-opt-md","date":"2017-11-20T07:32:27.000Z","updated":"2020-05-22T15:35:19.932Z","comments":true,"path":"2017/11/20/hexo-pure-opt-md/","link":"","permalink":"https://bugfixs.com/2017/11/20/hexo-pure-opt-md/","excerpt":"","text":"环境准备 Node环境安装，建议nvm 版本切换起来方便 git安装 安装Hexo 并更新 12npm install hexo -gnpm update hexo -g 初始化 &lt; folder &gt; 可选项 指定则在改目录下初始化，否则就在当前文件夹 1hexo init &lt;folder&gt; 生成网站并启动本地服务 启动完毕控制台点击打开 http://localhost:4000/，此时一个简单的博客就生成了。下面新增功能 12hexo ghexo s 新增功能-Rss订阅 命令cd 到 博客的 / 目录, 安装插件 1$ npm install hexo-generator-feed --save 安装完毕需要加上配置，是hexo的配置文件 __config.yml 1234567## feed feed:type: atompath: atom.xmllimit: 20hub:content: 新增功能-站点地图 命令cd 到 博客的 / 目录, 安装2个插件分别是百度个谷歌的sitemap 12$ npm install hexo-generator-sitemap --save$ npm install hexo-generator-baidu-sitemap --save 安装完毕需要加上配置，是hexo的配置文件 __config.yml 12345## sitemapsitemap: path: sitemap.xmlbaidusitemap: path: baidusitemap.xml hexo 常用操作命令 1234567891011hexo n “我的博客” == hexo new “我的博客” #新建文章 （基于Markdown格式）hexo p == hexo publishhexo g == hexo generate#生成hexo s == hexo server #启动服务预览hexo d == hexo deploy#部署hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器hexo server -s #静态模式hexo server -p 5000 #更改端口hexo server -i 192.168.1.1 #自定义 IPhexo clean #清除缓存 网页正常情况下可以忽略此条命令hexo g #生成静态网页 上面只是能在本地看看，现在部署到github github 新建仓库 仓库名称 必须为（github账号).github.io 参考示例，我因为创建过了所以有红色提示 安装git插件 还是在博客 / 目录下 1$ npm install hexo-deployer-git --save 再去新增配置文件__config.yml 修改 repository 为自己的地址 1https://github.com/用户名/用户名.github.io.git 生成SSH KEY 查看你的key。没有的话去生成先 1cat ~/.ssh/id_rsa.pub 打开github 设置 选择 SSH and GPG Keys 新增一个key，把上面的key复制进去后点击确定 测试一下 1$ ssh -T git@github.com 测试提示通过，代表已经可以访问github了，最后执行下面3个操作部署 生成静态文件上传，按照步骤顺序执行 123$ hexo clean //清除缓存文件db.json和已生成的静态文件public$ hexo g //生成网站静态文件到默认设置的public文件夹$ hexo d //部署网站到设定的仓库 访问一下你的站点: https://你的用户名.github.io ,就是你上面创建的仓库名字 更换主题 在hexo主题里面有许多选择，个人试验了几个主题，有部分主题配置起来有问题，这里举例一个puer主题，也就是本博客的样式 下载主题到指定目录 themes/, 照样在博客跟目录执行 1git clone https://github.com/cofess/hexo-theme-pure.git themes/pure 更新主题 12cd themes/puregit pull 安装一系列主题需要的插件 12345npm install hexo-wordcount --savenpm install hexo-generator-json-content --savenpm install hexo-generator-feed --savenpm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save 主题自己的配置 路劲在 themes/pure/_config.yml,不是博客的配置 导航菜单 12345678910111213141516171819202122# 导航菜单menu: Home: . Archives: archives # 归档 Categories: categories # 分类 Tags: tags # 标签 Repository: repository # github repositories Books: books # 书单 Links: links # 友链 About: about # 关于# 导航菜单图标（font awesome）menu_icons: enable: true # 是否启用菜单图标 home: fa-dashboard archives: fa-delicious categories: fa-folder tags: fa-tags repository: fa-code books: fa-leanpub links: fa-gg about: fa-coffee 主题内的搜索有3中配置 insight、swiftype、baidu 123456# Searchsearch: insight: true # you need to install `hexo-generator-json-content` before using Insight Search swiftype: # enter swiftype install key here baidu: false # you need to disable other search engines to use Baidu search 分享 支持weibo,qq,qzone,wechat,tencent,douban,diandian,facebook,twitter,google,linkedin 1234567# Share# weibo,qq,qzone,wechat,tencent,douban,diandian,facebook,twitter,google,linkedinshare: enable: true # 是否启用分享 sites: weibo,qq,wechat,facebook,twitter # PC端显示的分享图标 mobile_sites: weibo,qq,qzone # 移动端显示的分享图标 评论 主题集成了disqus、youyan、livere、gitment、 gitalk评论系统，选择其中一种即可 1234567891011121314151617181920212223搜索下面配置 修改# Comment# Gitment# Introduction: https://imsun.net/posts/gitment-introduction/comment: type: gitalk # 启用哪种评论系统 disqus: # enter disqus shortname here youyan: uid: 1783844 # enter youyan uid livere: uid: # enter youyan uid gitment: githubID: # repo: blogcomments ClientID: ClientSecret: lazy: false gitalk: # gitalk. https://gitalk.github.io/ owner: #必须. GitHub repository 所有者，可以是个人或者组织。 admin: #必须. GitHub repository 的所有者和合作者 (对这个 repository 有写权限的用户)。 repo: #必须. GitHub repository. ClientID: #必须. GitHub Application Client ID. ClientSecret: #必须. GitHub Application Client Secret. 举例gitalk 评论插件 创建OAuth Application 点击这里申请 一定要填写对你的博客地址，然后会生成 clientID and clientSecret 。 创建评论仓库 github 新建创库 比如仓库名字是 HexoComments 现在把对应的参数填写到 themes/pure/_config.yml 配置内 找到 comment 12345678comment: type: gitalk gitalk: 你的账号名 # gitalk. https://gitalk.github.io/owner: 你的账号名 #必须. GitHub repository 所有者，可以是个人或者组织。admin: 你的账号名 #必须. GitHub repository 的所有者和合作者 (对这个 repository 有写权限的用户)。repo: HexoComments #必须. GitHub repository.ClientID: 第一步生成的id #必须. GitHub Application Client ID.ClientSecret: 第一步生成的密码 如果你仔细配置好了，是不会出错的，但是由于gitalk访问比较慢，最好是翻墙使用不然会提示网络错误 图片方案 第一种 准备图床 上传图片至图床 赋值连接 文章内 直接连接指定 ![](图片外网连接) 第二种 采用插件，他解决的问题是文章对应的图片放在同名文件夹内，在创建.md文章的时候自动创建一个文章同名的文件夹，先安装插件 1npm install https://github.com/CodeFalling/hexo-asset-image --save 开启配置 1post_asset_folder: true # 创建文件时候自动创建对应目录存放 图片滴 文章内指定, 把图片放入![](文章生成的同名目录/logo.jpg) 第三种 七牛云同步推送，后续本地删除图片 先注册1个七牛云账号 点击注册 存储空间名称 存储区域选择默认 访问控制选择公开 进入 个人中心 -&gt; 秘钥管理 查看AK SK，一会要用到,顺便实名制做一下 安装插件，是用来同步本地图片到七牛云 1npm install hexo-qiniu-sync --save 在 / 下 创建一个文件夹 名字cdn 结构如下 配置 / 下的 _ config.yml 按照下面修改, 这里 plugins: - hexo-qiniu-sync 一定要注释掉不然会有问题 123456789101112131415161718192021## 七牛配置# plugins:# - hexo-qiniu-syncqiniu: offline: false sync: true bucket: 存储空间名称 access_key: 你的ak secret_key: 你的sk dirPrefix: urlPrefix: 你的测试域名，只有提示30天的那个 local_dir: cdn update_exist: true image: folder: images extend: js: folder: js css: folder: css 调整目录结构 把 theme/pure/_source/repository 文件夹移动到 博客/source/ 目录下 把 theme/pure/_source/books 文件夹移动到 博客/source/ 目录下 把 theme/pure/_source/links 文件夹移动到 博客/source/ 目录下 在 博客 /source 文件夹内创建一个名为 _data（禁止改名）的文件夹。 然后在文件内创建一个名为 links.yml 的文件,在其中添加相关数据即可。 1234Name: link: http://example.com avatar: http://example.com/avatar.png desc: \"这是一个描述\" 添加多个友情链接，我们只需要根据上面的格式重复填写即可。 将 Name 改为友情链接的名字，例如 Cofess。 http://example.com 为友情链接的地址。 http://example.com/avatar.png 为友情链接的头像。 这是一个描述 为友情链接描述。 写文章的已办操作和应该启动的配置 执行hexo new '文章名' 文章名对应下面的title 文章开头必须配置的分类和标签，和是否被搜索到 123456title: 文章标题categories: - 文章分类 # 与已存在的分类名一致则 归为一类，否则新创建一类tags: - 文章标签 # 与已存在的标签名一致则 归为一类，否则新创建一个标签toc: true # 是否启用内容索引 最后优化一下启动脚本 123456\"scripts\": &#123; \"dist\": \"hexo clean &amp;&amp; hexo g -d &amp;&amp; hexo qiniu sync\", \"sync\": \"hexo clean &amp;&amp; hexo g &amp;&amp; hexo qiniu sync \", \"start\": \"hexo clean &amp;&amp; hexo g &amp;&amp; hexo s \"&#125;, 执行，一般在同步之后之后，再本地查看，没问题就部署到github 123npm run dist # 部署到github 上npm run sync # 更新并同步图片到七牛云npm run start # 更新并启动本地服务，用于调试","categories":[{"name":"工具","slug":"工具","permalink":"https://bugfixs.com/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://bugfixs.com/tags/hexo/"}]},{"title":"JavaScript-f1","slug":"JavaScript-f1","date":"2017-05-20T12:09:47.000Z","updated":"2020-05-22T15:35:19.931Z","comments":true,"path":"2017/05/20/JavaScript-f1/","link":"","permalink":"https://bugfixs.com/2017/05/20/JavaScript-f1/","excerpt":"","text":"","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://bugfixs.com/categories/JavaScript/"}],"tags":[{"name":"原型","slug":"原型","permalink":"https://bugfixs.com/tags/%E5%8E%9F%E5%9E%8B/"}]},{"title":"JavaScript-f2","slug":"JavaScript-f2","date":"2017-05-20T12:09:42.000Z","updated":"2020-05-22T15:35:19.931Z","comments":true,"path":"2017/05/20/JavaScript-f2/","link":"","permalink":"https://bugfixs.com/2017/05/20/JavaScript-f2/","excerpt":"","text":"","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://bugfixs.com/categories/JavaScript/"}],"tags":[{"name":"原型链","slug":"原型链","permalink":"https://bugfixs.com/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"}]},{"title":"JavaScript-f3","slug":"JavaScript-f3","date":"2017-05-20T12:09:40.000Z","updated":"2020-05-22T15:35:19.931Z","comments":true,"path":"2017/05/20/JavaScript-f3/","link":"","permalink":"https://bugfixs.com/2017/05/20/JavaScript-f3/","excerpt":"","text":"","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://bugfixs.com/categories/JavaScript/"}],"tags":[{"name":"事件循环","slug":"事件循环","permalink":"https://bugfixs.com/tags/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/"}]},{"title":"Python-f3","slug":"Python-f3","date":"2015-05-20T12:10:02.000Z","updated":"2020-05-22T15:35:19.931Z","comments":true,"path":"2015/05/20/Python-f3/","link":"","permalink":"https://bugfixs.com/2015/05/20/Python-f3/","excerpt":"","text":"","categories":[{"name":"Python","slug":"Python","permalink":"https://bugfixs.com/categories/Python/"}],"tags":[{"name":"面向对象","slug":"面向对象","permalink":"https://bugfixs.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"}]},{"title":"Python-f2","slug":"Python-f2","date":"2015-05-20T12:09:59.000Z","updated":"2020-05-22T15:35:19.931Z","comments":true,"path":"2015/05/20/Python-f2/","link":"","permalink":"https://bugfixs.com/2015/05/20/Python-f2/","excerpt":"","text":"","categories":[{"name":"Python","slug":"Python","permalink":"https://bugfixs.com/categories/Python/"}],"tags":[{"name":"推导式","slug":"推导式","permalink":"https://bugfixs.com/tags/%E6%8E%A8%E5%AF%BC%E5%BC%8F/"}]},{"title":"Python-f1","slug":"Python-f1","date":"2014-05-20T12:09:57.000Z","updated":"2020-05-22T15:35:19.931Z","comments":true,"path":"2014/05/20/Python-f1/","link":"","permalink":"https://bugfixs.com/2014/05/20/Python-f1/","excerpt":"","text":"","categories":[{"name":"Python","slug":"Python","permalink":"https://bugfixs.com/categories/Python/"}],"tags":[{"name":"装饰器","slug":"装饰器","permalink":"https://bugfixs.com/tags/%E8%A3%85%E9%A5%B0%E5%99%A8/"}]}],"categories":[{"name":"协议","slug":"协议","permalink":"https://bugfixs.com/categories/%E5%8D%8F%E8%AE%AE/"},{"name":"分层自动化测试","slug":"分层自动化测试","permalink":"https://bugfixs.com/categories/%E5%88%86%E5%B1%82%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"},{"name":"Docker","slug":"Docker","permalink":"https://bugfixs.com/categories/Docker/"},{"name":"测试开发","slug":"测试开发","permalink":"https://bugfixs.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"},{"name":"Go","slug":"Go","permalink":"https://bugfixs.com/categories/Go/"},{"name":"数据结构算法","slug":"数据结构算法","permalink":"https://bugfixs.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/"},{"name":"工具","slug":"工具","permalink":"https://bugfixs.com/categories/%E5%B7%A5%E5%85%B7/"},{"name":"性能测试","slug":"性能测试","permalink":"https://bugfixs.com/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"},{"name":"Node","slug":"Node","permalink":"https://bugfixs.com/categories/Node/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://bugfixs.com/categories/JavaScript/"},{"name":"Python","slug":"Python","permalink":"https://bugfixs.com/categories/Python/"}],"tags":[{"name":"websocket","slug":"websocket","permalink":"https://bugfixs.com/tags/websocket/"},{"name":"Cypress","slug":"Cypress","permalink":"https://bugfixs.com/tags/Cypress/"},{"name":"Dockerfile","slug":"Dockerfile","permalink":"https://bugfixs.com/tags/Dockerfile/"},{"name":"Image","slug":"Image","permalink":"https://bugfixs.com/tags/Image/"},{"name":"理论","slug":"理论","permalink":"https://bugfixs.com/tags/%E7%90%86%E8%AE%BA/"},{"name":"并发","slug":"并发","permalink":"https://bugfixs.com/tags/%E5%B9%B6%E5%8F%91/"},{"name":"接口","slug":"接口","permalink":"https://bugfixs.com/tags/%E6%8E%A5%E5%8F%A3/"},{"name":"组装嵌套","slug":"组装嵌套","permalink":"https://bugfixs.com/tags/%E7%BB%84%E8%A3%85%E5%B5%8C%E5%A5%97/"},{"name":"双指针","slug":"双指针","permalink":"https://bugfixs.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"},{"name":"hexo","slug":"hexo","permalink":"https://bugfixs.com/tags/hexo/"},{"name":"locust-go-slave","slug":"locust-go-slave","permalink":"https://bugfixs.com/tags/locust-go-slave/"},{"name":"缓冲区","slug":"缓冲区","permalink":"https://bugfixs.com/tags/%E7%BC%93%E5%86%B2%E5%8C%BA/"},{"name":"异步非阻塞","slug":"异步非阻塞","permalink":"https://bugfixs.com/tags/%E5%BC%82%E6%AD%A5%E9%9D%9E%E9%98%BB%E5%A1%9E/"},{"name":"多进程","slug":"多进程","permalink":"https://bugfixs.com/tags/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"},{"name":"原型","slug":"原型","permalink":"https://bugfixs.com/tags/%E5%8E%9F%E5%9E%8B/"},{"name":"原型链","slug":"原型链","permalink":"https://bugfixs.com/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"},{"name":"事件循环","slug":"事件循环","permalink":"https://bugfixs.com/tags/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/"},{"name":"面向对象","slug":"面向对象","permalink":"https://bugfixs.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"},{"name":"推导式","slug":"推导式","permalink":"https://bugfixs.com/tags/%E6%8E%A8%E5%AF%BC%E5%BC%8F/"},{"name":"装饰器","slug":"装饰器","permalink":"https://bugfixs.com/tags/%E8%A3%85%E9%A5%B0%E5%99%A8/"}]}